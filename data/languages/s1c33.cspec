<?xml version="1.0" encoding="UTF-8"?>

<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/compiler_spec.rxg -->

<!-- Part of the calling convention is documented in section 2.3 in S1C33 FAMILY APPLICATION NOTE.
     Difference between epson and gcc compiler spec are documented in section 2.9 of the same manual.
     Also see section 6.4.4 in S5U1C33001C MANUAL. -->

<compiler_spec>
  <!-- TODO Data organization. This is copy-pasted from Arm so some of the values are likely wrong.
       need to verify with GNU33 source code. -->
  <data_organization>
    <absolute_max_alignment value="0"/>
    <machine_alignment value="2"/>
    <default_alignment value="1"/>
    <default_pointer_alignment value="4"/>
    <pointer_size value="4"/>
    <wchar_size value="4"/>
    <short_size value="2"/>
    <integer_size value="4"/>
    <long_size value="4"/>
    <long_long_size value="8"/>
    <float_size value="4"/>
    <double_size value="8"/>
    <long_double_size value="8"/>
    <size_alignment_map>
      <entry size="1" alignment="1"/>
      <entry size="2" alignment="2"/>
      <entry size="4" alignment="4"/>
      <entry size="8" alignment="8"/>
     </size_alignment_map>
  </data_organization>
  <global>
    <range space="ram" />
  </global>
  <stackpointer register="sp" space="ram" growth="negative"/>
  <default_proto>
    <!-- TODO -->
    <prototype name="__stdcall" extrapop="0" stackshift="0">
      <input>
        <!-- r6-r9 serve as argument registers (caller save). -->
        <pentry minsize="1" maxsize="4">
          <register name="r6"/>
        </pentry>
        <pentry minsize="1" maxsize="4">
          <register name="r7"/>
        </pentry>
        <pentry minsize="1" maxsize="4">
          <register name="r8"/>
        </pentry>
        <pentry minsize="1" maxsize="4">
          <register name="r9"/>
        </pentry>
        <pentry minsize="1" maxsize="500" align="4">
          <!-- Skipping the Link Pointer that gets pushed automatically by the call instruction. -->
          <addr offset="4" space="stack"/>
        </pentry>
      </input>
      <output killedbycall="true">
        <!-- r4 and r5 serve as result registers (caller save). -->
        <pentry minsize="1" maxsize="4" extension="inttype">
          <register name="r4"/>
        </pentry>
        <pentry minsize="5" maxsize="8">
          <addr space="join" piece1="r5" piece2="r4"/>
        </pentry>
      </output>
      <unaffected>
        <!-- r0-r3 are callee save. -->
        <register name="r0"/>
        <register name="r1"/>
        <register name="r2"/>
        <register name="r3"/>
        <!-- r10-r15 are reserved for toolchain use. Specifically for accessing tiered data sections. -->
        <!-- r10-r11 are reserved when -mdp=n is higher than the supported range (i.e. n is 5 or 6) -->
        <register name="r10"/>
        <register name="r11"/>
        <!-- r12-r15 are data offset registers. -->
        <register name="r12"/>
        <register name="r13"/>
        <register name="r14"/>
        <register name="r15"/>
        <register name="sp"/>
      </unaffected>
      <killedbycall>
        <register name="r5"/>
      </killedbycall>
    </prototype>
  </default_proto>
</compiler_spec>
