# sleigh specification file for Epson S1C33 Processor
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax
# Other language modules (see Ghidra/Processors) may provide better examples
# when creating a new language module.

# This specification groups extended immediate opcodes with their nearest neighbor. This makes the disassembly
# more readable but won't work well when the code jumps in-between exts, like one can jump in-between the opcode
# group of for example `ext 0x1; ext 0x1; and r0, 0x1` to get either `r0 &= 0x1`, `r0 &= 0x41` or `r0 &= 0x80041`.
# Not sure how rare these are in practice, and we still needs to set GNU33 up and collect a bunch of samples from
# both GNU33 and in the wild so we can test. If it's proven to be problematic, we might need to provide 2
# specifications, one for clarity but with lazier decoding and the other for correctness but gives more cryptic
# disassembly, possibly with comments automatically added by the anal plug. Moreover, we might need to work with the
# Ghidra devs if Sleigh doesn't support this type of constructions well, as possibly hinted by the mess known as Arm
# condition codes.

define endian=little;
define alignment=2;

define space ram type=ram_space size=4 default;
define space register type=register_space size=2;

# GPRs
define register offset=0x0000 size=4 [ r0 r1 r2 r3  r4 r5 r6 r7  r8 r9 r10 r11  r12 r13 r14 r15 ];
# Special registers
define register offset=0x0040 size=4 [ psr sp alr ahr  _ _ _ _  _ _ _ _  _ _ _ pc ];
# 64-bit mirror of alr | (ahr >> 32) for good measure.
define register offset=0x0040 size=8 [ _ ar  _ _  _ _  _ _ ];
# PSR mirror registers (operating on these is faster than operating on the CPU PSR)
define register offset=0x0080 size=1 [ nf zf vf cf ie ds mo il ];
# Define context bits (if defined, size must be multiple of 4-bytes)
define register offset=0x0100 size=4   contextreg;

#define context contextreg
#  extlevel		= (0,0)
#;

# Flag bits (?? manual is very confusing - could be typos!)
@define PSR_N "psr[0,1]"
@define PSR_Z "psr[1,1]"
@define PSR_V "psr[2,1]"
@define PSR_C "psr[3,1]"
@define PSR_IE "psr[4,1]"
@define PSR_DS "psr[6,1]"
@define PSR_MO "psr[7,1]"
@define PSR_IL "psr[8,4]"


@define EXT0 "class=6"
@define EXT1 "class=6; class=6"
@define C0_SBZ "c0_sbz=0"

## P-code syscalls ##

define pcodeop sleep;
define pcodeop halt;
define pcodeop debugBreak;
define pcodeop debugReturn;
define pcodeop softwareException;
define pcodeop zeroDivision;


## Opcode format ##
define token op_unit (16)
	class = (13, 15)
	op1 = (10, 12)
	op2 = (8, 9)
	c0_op1 = (9, 12)
	c0_d = (8, 8)
	c0_op2 = (6, 7)
	c0_sbz = (4, 5)

	ext0imm13 = (0, 12)
	ext1imm13 = (0, 12)
	ext1imm10 = (0, 9)
	
	ext0sign13 = (0, 12) signed
	ext1sign13 = (0, 12) signed
	ext1sign10 = (0, 9) signed

	imm10 = (0, 9)
	imm8 = (0, 7)
	sign8 = (0, 7) signed
	imm6 = (4, 9)
	sign6 = (4, 9) signed
	imm4 = (4, 7)
	sh4cap8 = (7, 7)
	imm3sbz = (3, 3)
	imm3 = (0, 2)
	imm2 = (0, 1)

	gpr0 = (0, 3)
	spr0 = (0, 3)
	gpr1 = (4, 7)
	spr1 = (4, 7)
	
	raw = (0, 15)
;


## "Enums" ##
attach variables [gpr0 gpr1] [ r0 r1 r2 r3  r4 r5 r6 r7  r8 r9 r10 r11  r12 r13 r14 r15 ];
attach variables [spr0 spr1] [ psr sp alr ahr  _ _ _ _  _ _ _ _  _ _ _ _ ];


## Immediates, PCRELs, etc. ##

# See S1C33000 CORE CPU MANUAL section 2.5.3 for how ext instructions extend immediate values.

# Does not depend on child opcode (must be invoked without ellipsis)
# NOTE: Child-dependent immediate operands cannot use this as an intermediary unfortunately
# (i.e. statements like `:inst imm32 is <...> [imm32 = imm26 << 6 + imm6;]` in another operand or instruction would fail)
# so the extend immediate logic has to be duplicated several times below.
# imm13
imm13: ext0imm13 is class=6 & ext0imm13 {
	export *[const]:4 ext0imm13;
}
# imm26
imm26: _imm26 is class=6 & ext1imm13; class=6 & ext0imm13 [ _imm26 = (ext1imm13 << 13) + ext0imm13; ] {
	export *[const]:4 _imm26;
}

# Class 0
# pcrel9
pcrel9: reloc is class=0 & sign8 [reloc = (inst_next - 2 + (sign8 << 1)) & 0xffffffff; ] {
	export *[ram]:4 reloc;
}
# pcrel22
pcrel22: reloc is class=6 & ext0sign13; class=0 & imm8 [
	reloc = (inst_next - 2 + ((ext0sign13 << 9) | (imm8 << 1))) & 0xffffffff;
] {
	export *[ram]:4 reloc;
}
# pcrel32
pcrel32: reloc is class=6 & ext1imm10; class=6 & ext0imm13; class=0 & imm8 [
	reloc = (inst_next - 2 + ((ext1imm10 << 22) | (ext0imm13 << 9) | (imm8 << 1))) & 0xffffffff;
] {
	export *[ram]:4 reloc;
}

# Class 2
# off7
off7: _off7 is class=2 & imm6 [ _off7 = imm6 << 1; ] { export *[const]:4 _off7; }

# off8
off8: _off8 is class=2 & imm6 [ _off8 = imm6 << 2; ] { export *[const]:4 _off8; }

# Class2 & 3
# imm19
imm19: _imm19 is class=6 & ext0imm13; (class=2 | class=3) & imm6 [ _imm19 = (ext0imm13 << 6) + imm6; ] {
	export *[const]:4 _imm19;
}
# imm32
imm32: _imm32 is class=6 & ext1imm13; class=6 & ext0imm13; (class=2 | class=3) & imm6 [ _imm32 = (ext1imm13 << 19) | (ext0imm13 << 6) | imm6; ] {
	export *[const]:4 _imm32;
}

# Class 3
# Compact bitmask (sign6 0b101010 -> 0xffffffea)
mask6: _mask6 is class=3 & sign6 [ _mask6 = sign6 & 0xffffffff; ] {
	export *[const]:4 _mask6;
}
# Compact bitmask (19-bits)
mask19: _mask19 is class=6 & ext0sign13; class=3 & imm6 [ _mask19 = ((ext0sign13 << 6) | imm6) & 0xffffffff; ] {
	export *[const]:4 _mask19;
}
# Bitmask (32-bits)
mask32: _mask32 is class=6 & ext1imm13; class=6 & ext0imm13; class=3 & imm6 [
	_mask32 = ((ext1imm13 << 19) | (ext0imm13 << 6) | imm6) & 0xffffffff;
] {
	export *[const]:4 _mask32;
}
# sign19
sign19: _sign19 is class=6 & ext0sign13; class=3 & imm6 [ _sign19 = (ext0sign13 << 6) | imm6; ] {
	export *[const]:4 _sign19;
}
# sign32
sign32: _sign32 is class=6 & ext1sign13; class=6 & ext0imm13; class=3 & imm6 [ _sign32 = (ext1sign13 << 19) | (ext0imm13 << 6) | imm6; ] {
	export *[const]:4 _sign32;
}

# Class 4
# sh4
sh4: cap8 is class=4 & sh4cap8=1 & imm4 [ cap8 = imm4 & 8; ] { export *[const]:1 cap8; }
sh4: cap7 is class=4 & sh4cap8=0 & imm4 [ cap7 = imm4 & 7; ] { export *[const]:1 cap7; }
off12: _off12 is class=4 & imm10 [ _off12 = imm10 << 2; ] { export *[const]:4 _off12; }


## Other operands ##

# Jump conditions
jrcc: "gt" is class=0 & c0_op1=0b0100 { if zf || (nf ^^ vf) goto inst_next; }
jrcc: "ge" is class=0 & c0_op1=0b0101 { if nf ^^ vf goto inst_next; }
jrcc: "lt" is class=0 & c0_op1=0b0110 { if !(nf ^^ vf) goto inst_next; }
jrcc: "le" is class=0 & c0_op1=0b0111 { if !zf && !(nf ^^ vf) goto inst_next; }
jrcc: "ugt" is class=0 & c0_op1=0b1000 { if zf || cf goto inst_next; }
jrcc: "uge" is class=0 & c0_op1=0b1001 { if cf goto inst_next; }
jrcc: "ult" is class=0 & c0_op1=0b1010 { if !cf goto inst_next; }
jrcc: "ule" is class=0 & c0_op1=0b1011 { if !zf && !cf goto inst_next; }
jrcc: "eq" is class=0 & c0_op1=0b1100 { if !zf goto inst_next; }
jrcc: "ne" is class=0 & c0_op1=0b1101 { if zf goto inst_next; }


## Macros ##

# Flags

macro resultFlags(result) {
	nf = (result s< 0);
	zf = (result == 0);
}

macro scanResultFlags(result) {
	nf = 0;
	zf = (result == 0);
	vf = 0;
	cf = (result == 8);
}

macro addFlags(a0, a1) {
	cf = carry(a0, a1);
	vf = scarry(a0, a1);
}

macro subFlags(a0, a1) {
	cf = a0 < a1;
	vf = sborrow(a0, a1);
}

# Instructions

macro addRegImm(dest, src, imm) {
	local result:4 = src + imm;
	addFlags(src, imm);
	resultFlags(result);
	dest = result;
}

macro subRegImm(dest, src, imm) {
	local result:4 = src - imm;
	subFlags(src, imm);
	resultFlags(result);
	dest = result;
}

macro cmpImm(gpr, signImm) {
	subFlags(gpr, signImm);
	resultFlags(gpr - signImm);
}

macro andRegImm(dest, src, mask) {
	local result:4 = src & mask;
	resultFlags(result);
	dest = result;
}

macro orRegImm(dest, src, mask) {
	local result:4 = src | mask;
	resultFlags(result);
	dest = result;
}

macro xorRegImm(dest, src, mask) {
	local result:4 = src ^ mask;
	resultFlags(result);
	dest = result;
}

macro notImm(gpr, mask) {
	local result:4 = ~mask;
	resultFlags(result);
	gpr = result;
}

macro sh4Dynamic(gprBits, shifts) {
	if (gprBits[3,1]) goto <cap>;
	shifts = gprBits[0,3];
	goto <end>;
	<cap>
	shifts = 8;
	<end>
}

macro lsrImm(gpr, bits) {
	local result:4 = gpr >> bits;
	resultFlags(result);
	gpr = result;
}

macro lslImm(gpr, bits) {
	local result:4 = gpr << bits;
	resultFlags(result);
	gpr = result;
}

macro asrImm(gpr, bits) {
	local result:4 = gpr s>> bits;
	resultFlags(result);
	gpr = result;
}

macro rorImm(gpr, bits) {
	local result:4 = (gpr >> bits) | (gpr << (32 - bits));
	resultFlags(result);
	gpr = result;
}

macro rolImm(gpr, bits) {
	local result:4 = (gpr << bits) | (gpr >> (32 - bits));
	resultFlags(result);
	gpr = result;
}

macro lsrReg(gpr, gprBits) {
	local shifts:1;
	sh4Dynamic(gprBits, shifts);
	lsrImm(gpr, shifts);
}

macro lslReg(gpr, gprBits) {
	local shifts:1;
	sh4Dynamic(gprBits, shifts);
	lslImm(gpr, shifts);
}

macro asrReg(gpr, gprBits) {
	local shifts:1;
	sh4Dynamic(gprBits, shifts);
	asrImm(gpr, shifts);
}

macro rorReg(gpr, gprBits) {
	local shifts:1;
	sh4Dynamic(gprBits, shifts);
	rorImm(gpr, shifts);
}

macro rolReg(gpr, gprBits) {
	local shifts:1;
	sh4Dynamic(gprBits, shifts);
	rolImm(gpr, shifts);
}

macro scan1(gprDest, gprBits) {
	local msb:1 = gprBits(3);
	# Counting leading bit 0s, # of leading bit 0s == position of first bit 1, or 8 if all 0.
	local result:4 = lzcount(msb);
	scanResultFlags(result);
	gprDest = result;
}

macro byteSwap(gprDest, gprSource) {
	gprDest = (
		((gprSource & 0xff000000) >> 24) |
		((gprSource & 0x00ff0000) >> 8) |
		((gprSource & 0x0000ff00) << 8) |
		((gprSource & 0x000000ff) << 24)
	);
}

macro bitSwap(gprDest, gprSource) {
	local tmpin:4 = gprSource;
	local tmpout0:4 = 0;
	local tmpout1:4 = 0;
	local tmpout2:4 = 0;
	local tmpout3:4 = 0;
	local ctr:1 = 0;

	<loopstart0>
	tmpout0 = (tmpout0 << 1) | (tmpin & 1);
	tmpin = tmpin >> 1;
	ctr = ctr + 1;
	if (ctr < 8) goto <loopstart0>;

	<loopstart1>
	tmpout1 = (tmpout1 << 1) | (tmpin & 1);
	tmpin = tmpin >> 1;
	ctr = ctr + 1;
	if (ctr < 16) goto <loopstart1>;

	<loopstart2>
	tmpout2 = (tmpout2 << 1) | (tmpin & 1);
	tmpin = tmpin >> 1;
	ctr = ctr + 1;
	if (ctr < 24) goto <loopstart2>;

	<loopstart3>
	tmpout3 = (tmpout3 << 1) | (tmpin & 1);
	tmpin = tmpin >> 1;
	ctr = ctr + 1;
	if (ctr < 32) goto <loopstart3>;

	gprDest = tmpout3;
	gprDest = gprDest << 8;
	gprDest = gprDest | tmpout2;
	gprDest = gprDest << 8;
	gprDest = gprDest | tmpout1;
	gprDest = gprDest << 8;
	gprDest = gprDest | tmpout0;
}

# Pack the PSR mirror registers as the CPU representation. Must be called before reading from the CPU PSR.
macro packPSR() {
	$(PSR_N) = nf & 1;
	$(PSR_Z) = zf & 1;
	$(PSR_V) = vf & 1;
	$(PSR_C) = cf & 1;
	$(PSR_IE) = ie & 1;
	$(PSR_DS) = ds & 1;
	$(PSR_MO) = mo & 1;
	$(PSR_IL) = il & 0xf;
}

# Unpack the CPU PSR bitfield as the fast PSRs. Must be called after writing to the CPU PSR.
macro unpackPSR() {
	nf = $(PSR_N);
	zf = $(PSR_Z);
	vf = $(PSR_V);
	cf = $(PSR_C);
	ie = $(PSR_IE);
	ds = $(PSR_DS);
	mo = $(PSR_MO);
	il = $(PSR_IL);
}


## Instructions ##

# Class 0 #

:nop is raw=0 {}
:slp is raw=0x40 { sleep(); }
:halt is raw=0x80 { halt(); }

:pushn {":"gpr0} is class=0 & c0_op1=0b0001 & c0_d=0 & c0_op2=0b00 & $(C0_SBZ) & gpr0 {
	local roffset:2 = (&gpr0) + 4;
	<loopstart>
	sp = sp - 4;
	roffset = roffset - 4;
	*:4 sp = *[register]:4 roffset;
	if (roffset != &r0) goto <loopstart>;
}
:popn {":"gpr0} is class=0 & c0_op1=0b0001 & c0_d=0 & c0_op2=0b01 & $(C0_SBZ) & gpr0 {
	local roffset:2 = &r0;
	<loopstart>
	*[register]:4 roffset = *:4 sp;
	roffset = roffset + 4;
	sp = sp + 4;
	if (roffset < &gpr0) goto <loopstart>;
}

:brk is raw=0x400 { debugBreak(); }
:retd is raw = 0x440 { debugReturn(); }

:int imm2 is class=0 & c0_op1=0b0010 & c0_op2=0b10 & $(C0_SBZ) & imm2 {
	packPSR();
	sp = sp - 4;
	*:4 sp = inst_next;
	sp = sp - 4;
	*:4 sp = psr;
	softwareException(imm2:1);
}
:reti is class=0 & c0_op1=0b0010 & c0_op2=0b11 & $(C0_SBZ) {
	psr = *:4 sp;
	sp = sp + 4;
	local lp = *:4 sp;
	sp = sp + 4;
	unpackPSR();
	return [lp];
}

:call gpr0 is class=0 & c0_op1=0b0011 & c0_d = 0 & c0_op2=0b00 & $(C0_SBZ) & gpr0 {
	sp = sp - 4;
	*:4 sp = inst_next;
	call [gpr0];
}
:call.d gpr0 is class=0 & c0_op1=0b0011 & c0_d = 1 & c0_op2=0b00 & $(C0_SBZ) & gpr0 {
	sp = sp - 4;
	*:4 sp = inst_next;
	delayslot(1);
	call [gpr0];
}

:ret is class=0 & c0_op1=0b0011 & c0_d = 0 & c0_op2=0b01 & $(C0_SBZ) {
	local lp = *:4 sp;
	sp = sp + 4;
	return [lp];
}
:ret.d is class=0 & c0_op1=0b0011 & c0_d = 1 & c0_op2=0b01 & $(C0_SBZ) {
	local lp = *:4 sp;
	sp = sp + 4;
	delayslot(1);
	return [lp];
}

:jp gpr0 is class=0 & c0_op1=0b0011 & c0_d = 0 & c0_op2=0b10 & $(C0_SBZ) & gpr0 {
	goto [gpr0];
}
:jp.d gpr0 is class=0 & c0_op1=0b0011 & c0_d = 1 & c0_op2=0b10 & $(C0_SBZ) & gpr0 {
	delayslot(1);
	goto [gpr0];
}

:jr^jrcc pcrel9 is jrcc & c0_d=0 & pcrel9 {
	build jrcc;
	goto pcrel9;
}
:jr^jrcc pcrel22 is ($(EXT0); jrcc & c0_d=0) & pcrel22 {
	build jrcc;
	goto pcrel22;
}
:jr^jrcc pcrel32 is ($(EXT1); jrcc & c0_d=0) & pcrel32 {
	build jrcc;
	goto pcrel32;
}
# Conditional jump (delayed instruction will execute regardless of whether the jump condition is fulfilled or not)
:jr^jrcc".d" pcrel9 is jrcc & c0_d=1 & pcrel9 {
	delayslot(1);
	build jrcc;
	goto pcrel9;
}
:jr^jrcc".d" pcrel22 is ($(EXT0); jrcc & c0_d=1) & pcrel22 {
	delayslot(1);
	build jrcc;
	goto pcrel22;
}
:jr^jrcc".d" pcrel32 is ($(EXT1); jrcc & c0_d=1) & pcrel32 {
	delayslot(1);
	build jrcc;
	goto pcrel32;
}

:call pcrel9 is class=0 & c0_op1 = 0b1110 & c0_d=0 & pcrel9 { call pcrel9; }
:call pcrel22 is pcrel22 & ... (class=0 & c0_op1 = 0b1110 & c0_d=0) { call pcrel22; }
:call pcrel32 is pcrel32 & ... (class=0 & c0_op1 = 0b1110 & c0_d=0) { call pcrel32; }
:call.d pcrel9 is class=0 & c0_op1 = 0b1110 & c0_d=1 & pcrel9 {
	delayslot(1);
	call pcrel9;
}
:call.d pcrel22 is pcrel22 & ... (class=0 & c0_op1 = 0b1110 & c0_d=1) {
	delayslot(1);
	call pcrel22;
}
:call.d pcrel32 is pcrel32 & ... (class=0 & c0_op1 = 0b1110 & c0_d=1) {
	delayslot(1);
	call pcrel32;
}

:jp pcrel9 is class=0 & c0_op1 = 0b1111 & c0_d=0 & pcrel9 { goto pcrel9; }
:jp pcrel22 is pcrel22 & ... (class=0 & c0_op1 = 0b1111 & c0_d=0) { goto pcrel22; }
:jp pcrel32 is pcrel32 & ... (class=0 & c0_op1 = 0b1111 & c0_d=0) { goto pcrel32; }
:jp.d pcrel9 is class=0 & c0_op1 = 0b1111 & c0_d=1 & pcrel9 {
	delayslot(1);
	goto pcrel9;
}
:jp.d pcrel22 is pcrel22 & ... (class=0 & c0_op1 = 0b1111 & c0_d=1) {
	delayslot(1);
	goto pcrel22;
}
:jp.d pcrel32 is pcrel32 & ... (class=0 & c0_op1 = 0b1111 & c0_d=1) {
	delayslot(1);
	goto pcrel32;
}

# Class 1 #

:ld.b gpr0, [gpr1] is class=1 & op1=0b000 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:1 gpr1); }
:ld.b gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b000 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:1 (gpr1 + imm13)); }
:ld.b gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b000 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:1 (gpr1 + imm26)); }
:ld.ub gpr0, [gpr1] is class=1 & op1=0b001 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:1 gpr1); }
:ld.ub gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b001 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:1 (gpr1 + imm13)); }
:ld.ub gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b001 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:1 (gpr1 + imm26)); }

:ld.h gpr0, [gpr1] is class=1 & op1=0b010 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:2 gpr1); }
:ld.h gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b010 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:2 (gpr1 + imm13)); }
:ld.h gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b010 & op2=0b00 & gpr1 & gpr0 { gpr0 = sext(*:2 (gpr1 + imm26)); }
:ld.uh gpr0, [gpr1] is class=1 & op1=0b011 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:2 gpr1); }
:ld.uh gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b011 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:2 (gpr1 + imm13)); }
:ld.uh gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b011 & op2=0b00 & gpr1 & gpr0 { gpr0 = zext(*:2 (gpr1 + imm26)); }

:ld gpr0, [gpr1] is class=1 & op1=0b100 & op2=0b00 & gpr1 & gpr0 { gpr0 = *:4 gpr1; }
:ld gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b100 & op2=0b00 & gpr1 & gpr0 { gpr0 = *:4 (gpr1 + imm13); }
:ld gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b100 & op2=0b00 & gpr1 & gpr0 { gpr0 = *:4 (gpr1 + imm26); }

:st.b gpr0, [gpr1] is class=1 & op1=0b101 & op2=0b00 & gpr1 & gpr0 { *gpr1 = gpr0:1; }
:st.b gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b101 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm13) = gpr0:1; }
:st.b gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b101 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm26) = gpr0:1; }

:st.h gpr0, [gpr1] is class=1 & op1=0b110 & op2=0b00 & gpr1 & gpr0 { *gpr1 = gpr0:2; }
:st.h gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b110 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm13) = gpr0:2; }
:st.h gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b110 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm26) = gpr0:2; }

:st gpr0, [gpr1] is class=1 & op1=0b111 & op2=0b00 & gpr1 & gpr0 { *gpr1 = gpr0; }
:st gpr0, [gpr1+imm13] is imm13; class=1 & op1=0b111 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm13) = gpr0; }
:st gpr0, [gpr1+imm26] is imm26; class=1 & op1=0b111 & op2=0b00 & gpr1 & gpr0 { *(gpr1 + imm26) = gpr0; }

:ld.b gpr0, [gpr1]+ is class=1 & op1=0b000 & op2=0b01 & gpr1 & gpr0 {
	gpr0 = sext(*:1 gpr1);
	gpr1 = gpr1 + 1;
}
:ld.ub gpr0, [gpr1]+ is class=1 & op1=0b001 & op2=0b01 & gpr1 & gpr0 {
	gpr0 = zext(*:1 gpr1);
	gpr1 = gpr1 + 1;
}

:ld.h gpr0, [gpr1]+ is class=1 & op1=0b010 & op2=0b01 & gpr1 & gpr0 {
	gpr0 = sext(*:2 gpr1);
	gpr1 = gpr1 + 2;
}
:ld.uh gpr0, [gpr1]+ is class=1 & op1=0b011 & op2=0b01 & gpr1 & gpr0 {
	gpr0 = zext(*:2 gpr1);
	gpr1 = gpr1 + 2;
}

:ld gpr0, [gpr1]+ is class=1 & op1=0b100 & op2=0b01 & gpr1 & gpr0 {
	gpr0 = *:4 gpr1;
	gpr1 = gpr1 + 4;
}

:st.b gpr0, [gpr1]+ is class=1 & op1=0b101 & op2=0b01 & gpr1 & gpr0 {
	*gpr1 = gpr0:1;
	gpr1 = gpr1 + 1;
}

:st.h gpr0, [gpr1]+ is class=1 & op1=0b110 & op2=0b01 & gpr1 & gpr0 {
	*gpr1 = gpr0:2;
	gpr1 = gpr1 + 2;
}

:st gpr0, [gpr1]+ is class=1 & op1=0b111 & op2=0b01 & gpr1 & gpr0 {
	*gpr1 = gpr0;
	gpr1 = gpr1 + 4;
}

:add gpr0, gpr1 is class=1 & op1=0b000 & op2=0b10 & gpr1 & gpr0 { addRegImm(gpr0, gpr0, gpr1); }
:add gpr0, gpr1, imm13 is imm13; class=1 & op1=0b000 & op2=0b10 & gpr1 & gpr0 { addRegImm(gpr0, gpr1, imm13); }
:add gpr0, gpr1, imm26 is imm26; class=1 & op1=0b000 & op2=0b10 & gpr1 & gpr0 { addRegImm(gpr0, gpr1, imm26); }
:sub gpr0, gpr1 is class=1 & op1=0b001 & op2=0b10 & gpr1 & gpr0 { subRegImm(gpr0, gpr0, gpr1); }
:sub gpr0, gpr1, imm13 is imm13; class=1 & op1=0b001 & op2=0b10 & gpr1 & gpr0 { subRegImm(gpr0, gpr1, imm13); }
:sub gpr0, gpr1, imm26 is imm26; class=1 & op1=0b001 & op2=0b10 & gpr1 & gpr0 { subRegImm(gpr0, gpr1, imm26); }
:cmp gpr0, gpr1 is class=1 & op1=0b010 & op2=0b10 & gpr1 & gpr0 { cmpImm(gpr0, gpr1); }
:cmp gpr1, imm13 is imm13; class=1 & op1=0b010 & op2=0b10 & gpr1 { cmpImm(gpr1, imm13); }
:cmp gpr1, imm26 is imm26; class=1 & op1=0b010 & op2=0b10 & gpr1 { cmpImm(gpr1, imm26); }
:mov gpr0, gpr1 is class=1 & op1=0b011 & op2=0b10 & gpr1 & gpr0 { gpr0 = gpr1; }
:and gpr0, gpr1 is class=1 & op1=0b100 & op2=0b10 & gpr1 & gpr0 { andRegImm(gpr0, gpr0, gpr1); }
:and gpr0, gpr1, imm13 is imm13; class=1 & op1=0b100 & op2=0b10 & gpr1 & gpr0 { andRegImm(gpr0, gpr1, imm13); }
:and gpr0, gpr1, imm26 is imm26; class=1 & op1=0b100 & op2=0b10 & gpr1 & gpr0 { andRegImm(gpr0, gpr1, imm26); }
:or gpr0, gpr1 is class=1 & op1=0b101 & op2=0b10 & gpr1 & gpr0 { orRegImm(gpr0, gpr0, gpr1); }
:or gpr0, gpr1, imm13 is imm13; class=1 & op1=0b101 & op2=0b10 & gpr1 & gpr0 { orRegImm(gpr0, gpr1, imm13); }
:or gpr0, gpr1, imm26 is imm26; class=1 & op1=0b101 & op2=0b10 & gpr1 & gpr0 { orRegImm(gpr0, gpr1, imm26); }
:not gpr0, gpr1 is class=1 & op1=0b110 & op2=0b10 & gpr1 & gpr0 { notImm(gpr0, gpr1); }
:xor gpr0, gpr1 is class=1 & op1=0b111 & op2=0b10 & gpr1 & gpr0 { xorRegImm(gpr0, gpr0, gpr1); }
:xor gpr0, gpr1, imm13 is imm13; class=1 & op1=0b111 & op2=0b10 & gpr1 & gpr0 { xorRegImm(gpr0, gpr1, imm13); }
:xor gpr0, gpr1, imm26 is imm26; class=1 & op1=0b111 & op2=0b10 & gpr1 & gpr0 { xorRegImm(gpr0, gpr1, imm26); }

# Class 2 #

:ld.b gpr0, ["sp"+imm6] is class=2 & op1=0b000 & gpr0 & imm6 { gpr0 = sext(*:1 (sp + imm6)); }
:ld.b gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b000 & gpr0) { gpr0 = sext(*:1 (sp + imm19)); }
:ld.b gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b000 & gpr0) { gpr0 = sext(*:1 (sp + imm32)); }
:ld.ub gpr0, ["sp"+imm6] is class=2 & op1=0b001 & gpr0 & imm6 { gpr0 = zext(*:1 (sp + imm6)); }
:ld.ub gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b001 & gpr0) { gpr0 = zext(*:1 (sp + imm19)); }
:ld.ub gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b001 & gpr0) { gpr0 = zext(*:1 (sp + imm32)); }

:ld.h gpr0, ["sp"+off7] is class=2 & op1=0b010 & gpr0 & off7 { gpr0 = sext(*:2 (sp + off7)); }
:ld.h gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b010 & gpr0) { gpr0 = sext(*:2 (sp + imm19)); }
:ld.h gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b010 & gpr0) { gpr0 = sext(*:2 (sp + imm32)); }
:ld.uh gpr0, ["sp"+off7] is class=2 & op1=0b011 & gpr0 & off7 { gpr0 = zext(*:2 (sp + off7)); }
:ld.uh gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b011 & gpr0) { gpr0 = zext(*:2 (sp + imm19)); }
:ld.uh gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b011 & gpr0) { gpr0 = zext(*:2 (sp + imm32)); }

:ld gpr0, ["sp"+off8] is class=2 & op1=0b100 & gpr0 & off8 { gpr0 = *:4 (sp + off8); }
:ld gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b100 & gpr0) { gpr0 = *:4 (sp + imm19); }
:ld gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b100 & gpr0) { gpr0 = *:4 (sp + imm32); }

:st.b gpr0, ["sp"+imm6] is class=2 & op1=0b101 & gpr0 & imm6 { *(sp + imm6) = gpr0:1; }
:st.b gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b101 & gpr0) { *(sp + imm19) = gpr0:1; }
:st.b gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b101 & gpr0) { *(sp + imm32) = gpr0:1; }

:st.h gpr0, ["sp"+off7] is class=2 & op1=0b110 & gpr0 & off7 { *(sp + off7) = gpr0:2; }
:st.h gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b110 & gpr0) { *(sp + imm19) = gpr0:2; }
:st.h gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b110 & gpr0) { *(sp + imm32) = gpr0:2; }

:st gpr0, ["sp"+off8] is class=2 & op1=0b111 & gpr0 & off8 { *(sp + off8) = gpr0:2; }
:st gpr0, ["sp"+imm19] is imm19 & ($(EXT0); class=2 & op1=0b111 & gpr0) { *(sp + imm19) = gpr0; }
:st gpr0, ["sp"+imm32] is imm32 & ($(EXT1); class=2 & op1=0b111 & gpr0) { *(sp + imm32) = gpr0; }

# Class 3 #

:add gpr0, imm6 is class=3 & op1=0b000 & gpr0 & imm6 { addRegImm(gpr0, gpr0, imm6); }
:add gpr0, imm19 is ($(EXT0); class=3 & op1=0b000 & gpr0) & imm19 { addRegImm(gpr0, gpr0, imm19); }
:add gpr0, imm32 is ($(EXT1); class=3 & op1=0b000 & gpr0) & imm32 { addRegImm(gpr0, gpr0, imm32); }

:sub gpr0, imm6 is class=3 & op1=0b001 & gpr0 & imm6 { subRegImm(gpr0, gpr0, imm6); }
:sub gpr0, imm19 is ($(EXT0); class=3 & op1=0b001 & gpr0) & imm19 { subRegImm(gpr0, gpr0, imm19); }
:sub gpr0, imm32 is ($(EXT1); class=3 & op1=0b001 & gpr0) & imm32 { subRegImm(gpr0, gpr0, imm32); }

:cmp gpr0, sign6 is class=3 & op1=0b010 & gpr0 & sign6 { cmpImm(gpr0, sign6); }
:cmp gpr0, sign19 is ($(EXT0); class=3 & op1=0b010 & gpr0) & sign19 { cmpImm(gpr0, sign19); }
:cmp gpr0, sign32 is ($(EXT1); class=3 & op1=0b010 & gpr0) & sign32 { cmpImm(gpr0, sign32); }

:mov gpr0, sign6 is class=3 & op1=0b011 & gpr0 & sign6 { gpr0 = sign6; }
:mov gpr0, sign19 is ($(EXT0); class=3 & op1=0b011 & gpr0) & sign19 { gpr0 = sign19; }
:mov gpr0, sign32 is ($(EXT1); class=3 & op1=0b011 & gpr0) & sign32 { gpr0 = sign32; }

:and gpr0, mask6 is class=3 & op1=0b100 & gpr0 & mask6 { andRegImm(gpr0, gpr0, mask6); }
:and gpr0, mask19 is ($(EXT0); class=3 & op1=0b100 & gpr0) & mask19 { andRegImm(gpr0, gpr0, mask19); }
:and gpr0, mask32 is ($(EXT1); class=3 & op1=0b100 & gpr0) & mask32 { andRegImm(gpr0, gpr0, mask32); }

:or gpr0, mask6 is class=3 & op1=0b101 & gpr0 & mask6 { orRegImm(gpr0, gpr0, mask6); }
:or gpr0, mask19 is ($(EXT0); class=3 & op1=0b101 & gpr0) & mask19 { orRegImm(gpr0, gpr0, mask19); }
:or gpr0, mask32 is ($(EXT1); class=3 & op1=0b101 & gpr0) & mask32 { orRegImm(gpr0, gpr0, mask32); }

:xor gpr0, mask6 is class=3 & op1=0b110 & gpr0 & mask6 { xorRegImm(gpr0, gpr0, mask6); }
:xor gpr0, mask19 is ($(EXT0); class=3 & op1=0b110 & gpr0) & mask19 { xorRegImm(gpr0, gpr0, mask19); }
:xor gpr0, mask32 is ($(EXT1); class=3 & op1=0b110 & gpr0) & mask32 { xorRegImm(gpr0, gpr0, mask32); }

:not gpr0, mask6 is class=3 & op1=0b111 & gpr0 & mask6 { notImm(gpr0, mask6); }
:not gpr0, mask19 is ($(EXT0); class=3 & op1=0b111 & gpr0) & mask19 { notImm(gpr0, mask19); }
:not gpr0, mask32 is ($(EXT1); class=3 & op1=0b111 & gpr0) & mask32 { notImm(gpr0, mask32); }

# Class 4 #

:add "sp", off12 is class=4 & op1=0b000 & off12 { sp = sp + off12; }
:sub "sp", off12 is class=4 & op1=0b001 & off12 { sp = sp - off12; }

:srl gpr0, sh4 is class=4 & op1=0b010 & op2=0b00 & gpr0 & sh4 { lsrImm(gpr0, sh4); }
:sll gpr0, sh4 is class=4 & op1=0b011 & op2=0b00 & gpr0 & sh4 { lslImm(gpr0, sh4); }
:sra gpr0, sh4 is class=4 & op1=0b100 & op2=0b00 & gpr0 & sh4 { asrImm(gpr0, sh4); }
:sla gpr0, sh4 is class=4 & op1=0b101 & op2=0b00 & gpr0 & sh4 { lslImm(gpr0, sh4); }
:rr gpr0, sh4 is class=4 & op1=0b110 & op2=0b00 & gpr0 & sh4 { rorImm(gpr0, sh4); }
:rl gpr0, sh4 is class=4 & op1=0b111 & op2=0b00 & gpr0 & sh4 { rolImm(gpr0, sh4); }

:srl gpr0, gpr1 is class=4 & op1=0b010 & op2=0b01 & gpr1 & gpr0 { lsrReg(gpr0, gpr1); }
:sll gpr0, gpr1 is class=4 & op1=0b011 & op2=0b01 & gpr1 & gpr0 { lslReg(gpr0, gpr1); }
:sra gpr0, gpr1 is class=4 & op1=0b100 & op2=0b01 & gpr1 & gpr0 { asrReg(gpr0, gpr1); }
:sla gpr0, gpr1 is class=4 & op1=0b101 & op2=0b01 & gpr1 & gpr0 { lslReg(gpr0, gpr1); }
:rr gpr0, gpr1 is class=4 & op1=0b110 & op2=0b01 & gpr1 & gpr0 { rorReg(gpr0, gpr1); }
:rl gpr0, gpr1 is class=4 & op1=0b111 & op2=0b01 & gpr1 & gpr0 { rolReg(gpr0, gpr1); }

:scan0 gpr0, gpr1 is class=4 & op1=0b010 & op2=0b10 & gpr1 & gpr0 { scan1(gpr0, ~gpr1); }
:scan1 gpr0, gpr1 is class=4 & op1=0b011 & op2=0b10 & gpr1 & gpr0 { scan1(gpr0, gpr1); }

:swap gpr0, gpr1 is class=4 & op1=0b100 & op2=0b10 & gpr1 & gpr0 { byteSwap(gpr0, gpr1); }
:mirror gpr0, gpr1 is class=4 & op1=0b101 & op2=0b10 & gpr1 & gpr0 { bitSwap(gpr0, gpr1); }

:div0s gpr1 is class=4 & op1=0b010 & op2=0b11 & gpr0=r0 & gpr1 {
	if (gpr1 == 0) goto <zerodiv>;
	ar = sext(alr);
	ds = ar s< 0;
	nf = gpr1 s< 0;
	goto <end>;
	<zerodiv>
	zeroDivision();
	<end>
}
:div0u gpr1 is class=4 & op1=0b011 & op2=0b11 & gpr0=r0 & gpr1 {
	if (gpr1 == 0) goto <zerodiv>;
	ahr = 0;
	ds = 0;
	nf = 0;
	goto <end>;
	<zerodiv>
	zeroDivision();
	<end>
}

:div1 gpr1 is class=4 & op1=0b100 & op2=0b11 & gpr0=r0 & gpr1 {
	ar = ar << 1;
	local tmp:8;
	local dvd:8 = zext(ahr) | (zext(ds) << 32);
	local dvr:8 = zext(gpr1) | (zext(nf) << 32);

	if ds == 0 && nf == 0 goto <case_00>;
	if ds == 0 && nf == 1 goto <case_01>;
	if ds == 1 && nf == 0 goto <case_10>;
	if ds == 1 && nf == 1 goto <case_11>;

	<case_00>
	tmp = dvd - dvr;
	if (tmp & 0x100000000) == 0 goto <update>;
	goto <end>;

	<case_01>
	tmp = dvd + dvr;
	if (tmp & 0x100000000) == 0x100000000 goto <update>;
	goto <end>;

	<case_10>
	tmp = dvd + dvr;
	if (tmp & 0x100000000) == 0 goto <update>;
	goto <end>;

	<case_11>
	tmp = dvd - dvr;
	if (tmp & 0x100000000) == 0x100000000 goto <update>;
	goto <end>;

	<update>
	ahr = tmp:4;
	alr = alr | 1;

	<end>
}
:div2s gpr1 is class=4 & op1=0b101 & op2=0b11 & gpr0=r0 & gpr1 {
	if (ds == 0) || ((nf == 0 && (ahr + gpr1) != 0) || (nf == 1 && (ahr - gpr1) != 0)) goto <end>;
	ahr = 0;
	alr = alr + 1;
	<end>
}
:div3s is class=4 & op1=0b110 & op2=0b11 & gpr1=r0 & gpr0=r0 {
	if ds == nf goto <end>;
	alr = alr ^ 0x80000000;
	<end>
}

# Class 5 #

:mov "psr", gpr1 is class=5 & op1=0b000 & op2=0b00 & spr0=psr & gpr1 {
	psr = gpr1;
	unpackPSR();
}
:mov spr0, gpr1 is class=5 & op1=0b000 & op2=0b00 & gpr1 & spr0 { spr0 = gpr1; }
:mov gpr0, "psr" is class=5 & op1=0b001 & op2=0b00 & spr1=psr & gpr0 {
	packPSR();
	gpr0 = psr;
}
:mov gpr0, spr1 is class=5 & op1=0b001 & op2=0b00 & spr1 & gpr0 { gpr0 = spr1; }

:btst [gpr1], imm3 is class=5 & op1=0b010 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = (1 << imm3);
	zf = (*:1 gpr1) & bm == 0;
}
:btst [gpr1+imm13], imm3 is imm13; class=5 & op1=0b010 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = (1 << imm3);
	zf = (*:1 (gpr1 + imm13)) & bm == 0;
}
:btst [gpr1+imm26], imm3 is imm26; class=5 & op1=0b010 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = (1 << imm3);
	zf = (*:1 (gpr1 + imm26)) & bm == 0;
}
:bclr [gpr1], imm3 is class=5 & op1=0b011 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = ~(1 << imm3);
	*gpr1 = (*:1 gpr1) & bm;
}
:bclr [gpr1+imm13], imm3 is imm13; class=5 & op1=0b011 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = ~(1 << imm3);
	local off = gpr1 + imm13;
	*off = (*:1 off) & bm;
}
:bclr [gpr1+imm26], imm3 is imm26; class=5 & op1=0b011 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = ~(1 << imm3);
	local off = gpr1 + imm26;
	*off = (*:1 off) & bm;
}
:bset [gpr1], imm3 is class=5 & op1=0b100 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	*gpr1 = (*:1 gpr1) | bm;
}
:bset [gpr1+imm13], imm3 is imm13; class=5 & op1=0b100 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	local off = gpr1 + imm13;
	*off = (*:1 off) | bm;
}
:bset [gpr1+imm26], imm3 is imm26; class=5 & op1=0b100 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	local off = gpr1 + imm26;
	*off = (*:1 off) | bm;
}
:bnot [gpr1], imm3 is class=5 & op1=0b101 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	*gpr1 = (*:1 gpr1) ^ bm;
}
:bnot [gpr1+imm13], imm3 is imm13; class=5 & op1=0b101 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	local off = gpr1 + imm13;
	*off = (*:1 off) ^ bm;
}
:bnot [gpr1+imm26], imm3 is imm26; class=5 & op1=0b101 & op2=0b00 & gpr1 & imm3 {
	local bm:1 = 1 << imm3;
	local off = gpr1 + imm26;
	*off = (*:1 off) ^ bm;
}

:adc gpr0, gpr1 is class=5 & op1=0b110 & op2=0b00 & gpr1 & gpr0 {
	local tmp = gpr0 + gpr1;
	cf = carry(gpr0, gpr1) || carry(tmp, zext(cf));
	vf = scarry(gpr0, gpr1) || scarry(tmp, zext(cf));
	tmp = tmp + zext(cf);
	resultFlags(tmp);
	gpr0 = tmp;
}
:sbc gpr0, gpr1 is class=5 & op1=0b111 & op2=0b00 & gpr1 & gpr0 {
	local tmp = gpr0 - gpr1;
	cf = (gpr0 < gpr1) || (tmp < zext(cf));
	vf = sborrow(gpr0, gpr1) || sborrow(tmp, zext(cf));
	tmp = tmp - zext(cf);
	resultFlags(tmp);
	gpr0 = tmp;
}

:mov.b gpr0, gpr1 is class=5 & op1=0b000 & op2=0b01 & gpr1 & gpr0 { gpr0 = sext(gpr1:1); }
:mov.ub gpr0, gpr1 is class=5 & op1=0b001 & op2=0b01 & gpr1 & gpr0 { gpr0 = zext(gpr1:1); }
:mov.h gpr0, gpr1 is class=5 & op1=0b010 & op2=0b01 & gpr1 & gpr0 { gpr0 = sext(gpr1:2); }
:mov.uh gpr0, gpr1 is class=5 & op1=0b011 & op2=0b01 & gpr1 & gpr0 { gpr0 = zext(gpr1:2); }

:mlt.h gpr0, gpr1 is class=5 & op1=0b000 & op2=0b10 & gpr1 & gpr0 { alr = sext(gpr0:2) * sext(gpr1:2); }
:mltu.h gpr0, gpr1 is class=5 & op1=0b001 & op2=0b10 & gpr1 & gpr0 { alr = zext(gpr0:2) * zext(gpr1:2); }
:mlt gpr0, gpr1 is class=5 & op1=0b010 & op2=0b10 & gpr1 & gpr0 { ar = sext(gpr0) * sext(gpr1); }
:mltu gpr0, gpr1 is class=5 & op1=0b011 & op2=0b10 & gpr1 & gpr0 { ar = zext(gpr0) * zext(gpr1); }

:mac gpr1 is class=5 & op1=0b100 & op2=0b10 & gpr0=r0 & gpr1 {
	if gpr1 == 0 goto <end>;
	local regBase:2 = &r0;
	local regOff:2 = &gpr1 - regBase;
	local gpra = regBase + ((regOff + 4) & 0xf);
	local gprb = regBase + ((regOff + 8) & 0xf);
	<loopstart>
	local a = *[register]:4 gpra;
	local b = *[register]:4 gprb;
	local q:8 = sext(*:2 a) * sext(*:2 b);
	# MO should stick until manually reset by the user code
	mo = mo | carry(ar, q);
	ar = ar + q;
	*[register]:4 gpra = a + 2;
	*[register]:4 gprb = b + 2;
	if gpr1 > 0 goto <loopstart>;
	<end>
}
